#! perl
# TabbedEx plugin for rxvt-unicode; based on original tabbed plugin.
# https://github.com/mina86/urxvt-tabbedex
# Copyright (c) 2006-2018 tabbed and tabbedex authors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=head1 NAME

tabbedex - tabbed interface to urxvt; extended

=head1 DESCRIPTION

This transforms the terminal into a tabbar with additional terminals, that is,
it implements what is commonly referred to as "tabbed terminal".  tabbedex is an
extended version of the tabbed plugin which comes with urxvt.

When rxvt-unicode is started with this plugin slave terminals or tabs can be
started and switched between.  One of the terminals is the current or active one
and it is the only one that is visible.  rxvt-unicode will exit once all tabs
are closed.

Once at least two slave terminals are created a tab bar is displayed at the top
of the window which lists all the slave terminals.  Clicking on a number/name of
a tab on that bar switches to given tab.

=head2 Key bindings

Creating new tabs, switching between them and moving them around is accomblished
by the following key bindings:

=over

=item B<Shift-Down>

Creates a new tab.

=item B<Shift-Left> and B<Shift-Right>

Switches to the tab on the left or on the right of the current tab.  Movement
wraps around once at the first or last tab.

=item B<Meta-F1> through B<Meta-F12>

Switches to the first through twelfth tab.

=item B<Control-Left> and B<Control-right>

Move current tab to the left or right.  Wraps around on the first and last
position.

=item B<Shift-Up>

Allows current tab to be renamed.  Tab bar is shown if it was hidden, current
tab’s name (if nay) is cleared and cursor is displayed in its place.  Typing
text renames the tab, backspace or Ctrl+H delete the last character, Escape or
Ctrl+C aborts the rename operation and Enter accepts the new name.

=back

Note that those default key bindings can be disabled, using B<no-tabbedex-keys>
resource (see below), and replaced with custom ones using urxvt's B<keysym>
resource.

=head1 CONFIGURATION

The extension can be configured with X resources just like urxvt itself.  The
default, deprecated, behaviour is for tabbedex to use C<tabbed> as a resource
name prefix, for example:

    URxvt.tabbed.tabbar-fg: 4
    URxvt.tabbed.tabbar-bg: 0

This can be configured using a C<tabbedex-rs-prefix> resource, for example:

    ! Percent sign means name of the current plugin.
    URxvt.tabbed.tabbedex-rs-prefix: %

    ! Affects tabbed plugin only:
    URxvt.tabbed.tabbar-fg: 4
    URxvt.tabbed.tabbar-bg: 0

    ! Affects tabbedex plugin only:
    URxvt.tabbedex.tabbar-fg: 5
    URxvt.tabbedex.tabbar-bg: 0

B<However>, future versions of the extensions will I<stop> respecting the
resource all together and will unconditionally use plugin name as the prefix.
This will bring it in line with how other urxvt perl extensions behave.

To avoid breakage, users should set C<tabbedex-rs-prefix> to percent sign (as
shown in the example above) and use name of the plugin as the prefix.  tabbedex
will issue a warning if it is not followed.

Tabbedex recognises the following resources:

=over

=item B<autohide>: I<boolean>

If set (the default), the tab bar will be hidden unless there are at least two
tabs open.  This is irrespective of whether C<NEW> button or tab's title is
displayed.

=item B<new-button>: I<boolean>

If set, a C<NEW> button will be displayed on the left of the tab bar.  Clicking
the button creates a new tab.  It is not displayed by default.

=item B<tabbar-fg>: I<colour>

=item B<tabbar-bg>: I<colour>

Foreground and background colours of the tab bar.  (3, 0) by default which
translates to brown/dark yellow on black background.

Colours can be specified as: I<-2> meaning default foreground, I<-1> meaning
default background, an integer between B<0> and B<255> specifying index in
terminal' colour palette or any other string which X11 recognises as a colour.

=item B<tab-fg>: I<colour>

=item B<tab-bg>: I<colour>

Foreground and background colours of the current tab on the tab bar.  (0, 1) by
default which translates to black on red.  See B<tabbar-fg> for more
documentation on how colours can be specified.

=item B<bell-fg>: I<colour>

=item B<bell-bg>: I<colour>

Foreground and background colours of an inactive tab on which bell has rung.
(0, 3) by default which translates to black on brown/dark yellow (i.e. inverse
of the default tab bar colours).  See B<tabbar-fg> for more documentation on how
colours can be specified.

=item B<bell-tab-fg>: I<colour>

=item B<bell-tab-bg>: I<colour>

Foreground and background colours of a active tab in which bell is ringing.  (5,
4) by default which translates to magenta an blue.  See B<tabbar-fg> for more
documentation on how colours can be specified.  The bell is said to be ringing
on an active tab for B<bell-timeout> seconds after it started.

=item B<bell-timeout>: I<integer>

Time in seconds, one second by default, a bell is said to be ringing on current
tab for after it was rung.  Setting this to zero essentially disables the
B<bell-tab-(fg|bg)> styling of tabs.

=item B<title>: I<boolean>

If set (the default), when tab bar is visible and there is enough space left,
current tab's title will be displayed after the last tab.

=item B<title-fg>: I<colour>

=item B<title-bg>: I<colour>

Foreground and background colours of the tab title.  (2, 0) by default which
translates to green on black.  See B<tabbar-fg> for more documentation on how
colours can be specified.

=item B<new-tab-command>: I<string>

Specifies how urxvt's B<-e> switch affects tabs created by tabbedex.  The
resource can have one of three values:

=over

=item I<inherit>

The default.  The B<-e> command will be used by all tabs created by tabbedex.

=item I<clear>

Only the initial tab will use the B<-e> switch provided on urxvt's command line.
All other tabs will act as if the option was not provided.

=item I<-e B<another command>>

The initial tab will use the B<-e> switch provided on urxvt's command line (if
any) while all other tabs will use switch specified by this setting.  Note that
parsing of the resource simply splits words on white space so things like I<-e
my-prog "argument with spaces"> will not work.

=back

=item B<no-tabbedex-keys>: I<boolean>

If set, the default key bindings (described at the beginning of this document)
are not set up.  The mappings can be recreated using urxvt's B<keysym.*>
resources.  For example, the following will recreate all the default key
bindings:

    URxvt.tabbedex.no-tabbedex-keys: yes
    URxvt.keysym.Shift-Left:    tabbedex:prev_tab
    URxvt.keysym.Shift-Right:   tabbedex:next_tab
    URxvt.keysym.Shift-Down:    tabbedex:new_tab
    URxvt.keysym.Shift-Up:      tabbedex:rename_tab
    URxvt.keysym.Control-Left:  tabbedex:move_tab_left
    URxvt.keysym.Control-Right: tabbedex:move_tab_right
    URxvt.keysym.Meta-F1:       tabbedex:goto_tab_1
    URxvt.keysym.Meta-F2:       tabbedex:goto_tab_2
    URxvt.keysym.Meta-F3:       tabbedex:goto_tab_3
    URxvt.keysym.Meta-F4:       tabbedex:goto_tab_4
    URxvt.keysym.Meta-F5:       tabbedex:goto_tab_5
    URxvt.keysym.Meta-F6:       tabbedex:goto_tab_6
    URxvt.keysym.Meta-F7:       tabbedex:goto_tab_7
    URxvt.keysym.Meta-F8:       tabbedex:goto_tab_8
    URxvt.keysym.Meta-F9:       tabbedex:goto_tab_9
    URxvt.keysym.Meta-F10:      tabbedex:goto_tab_10
    URxvt.keysym.Meta-F11:      tabbedex:goto_tab_11
    URxvt.keysym.Meta-F12:      tabbedex:goto_tab_12

See I<ACTIONS AND USER COMMANDS> below for list of available actions.

=item B<perl-ext-blacklist>: I<string>

A comma-separated list of extensions that must not be loaded into the slave
terminals (tabs).  tabbedex plugin is implicitly added onto the list.

=item B<reopen-on-close>: I<boolean>

If set, whenever last tab is destroyed a new one will be created.

=item B<tabbar-timeouts>: I<string>

When new text is written to an inactive tab, activity marks are displayed around
its number (or name if it has one) on the tab bar.  By default Unicode
characters are used to display a block which grows with time the longer it was
since last time there was any activity in the tab.

This resource allows for this to be customised.  It's format is

    ( <timeout> ":" <character> ":" )* <timeout> ":" <character> ":"

where <timeout> is timeout in seconds and <character> is a single activity
character.  If activity character is (, [, { or < it will be used as left
activity mark and matching character will be used on the right side.

=back

Extension's behaviour is also influenced by some of URxvt's configuration
options as well.  (See I<RESOURCES> in the L<urxvt(1)> manpage for more
information about them).  The options include:

=over

=item B<mapAlert>

If set, when bell rings in an inactive tab, the tab is made active.

=item B<urgentOnBell>

If set, when bell rings in an inactive tab, the master terminal's urgency hint
is set.

=back

=head1 ACTIONS AND USER COMMANDS

tabbedex supports several actions which can be bound to keys with
B<URxvt.keysym>.I<keysym> resource, for example:

    URxvt.keysym.Control-t: tabbedex:new_tab

which creates a key binding for I<Ctrl+T> to create a new tab.  Using the name
of the extension as the prefix of the keysym binding is preferred but when
running an ancient urxvt (as in anything prior to 9.21) an alternative
B<perl:tabbedex> must be used instead.

Supported actions are:

=over

=item B<tabbedex:new_tab>

Creates a new tab.

=item B<tabbedex:next_tab> and B<tabbedex:prev_tab>

Switches to the tab on the right or left of the current tab.

=item B<tabbedex:move_tab_left> and B<tabbedex:move_tab_right>

Moves the current tab left or right.

=item B<goto_tab_>I<N>

If I<N> is a positive integer, switches to the I<N>th tab.  If I<N> is negative,
switches to the -I<N>th tab counting from the last one.

=item B<tabbedex:kill_tab>

Kills/destroys current tab.

=item B<tabbedex:rename_tab>

Start renaming the tab.

=back

=head1 OSC SEQUENCES

tabbedex supports a single OSC sequence which can be invoked by programs running
in the terminal by writing a special sequence, namely I<ESC ] 777 ; string ST>
where I<string> is the command to execute.  For example:

    printf '\033]777;tabbedx;set_tab_name;%s\007' "foo"

=over

=item B<tabbedex;set_tab_name;>I<name>

Sets name of the current tab to I<name>.

=back

=cut

use Scalar::Util;


# An initialisation hook which is called in root/master and slave tabs.  It’s
# purpose is to determine which one the object is and call that type’s
# initialisation code.
#
# The reason we do it this way rather than directly pointing urxvt at correct
# package is that we want urxvt to think that master and slave tabs both use
# ‘tabbedex’ extension.  Previously, the code would point tabs to
# a ‘urxvt::ext::tabbedex::tab’ extension but that resulted in terminal thinking
# the extension is ‘tabbedex::tab’ (actually it was even more complicated than
# that) and actions weren’t dispatched correctly.
#
# Now, no matter if it’s root or not, from urxvt’s point of view it’s all
# ‘tebbedex’ plugin.
sub on_init {
	my ($self) = @_;

	# If we are root tab, then terminal’s 'tabbedex-root-tab' property is
	# not set.  Otherwise it is set and it points to the root tab.
	my $root = delete $self->{term}{'tabbedex-root-tab'};
	my $type = 'root';
	if (defined $root) {
		$type = 'tab';
		$self->{root} = $root;
	}

	# Copy ISA so things behave the same way.
	my $pkg = Scalar::Util::blessed($self);
	@{"urxvt::ext::tabbedex::$type\::ISA"} = @{"$pkg\::ISA"};

	# Change type of the object so methods in proper package are used.
	bless $self, "urxvt::ext::tabbedex::$type";

	# And continue initialisation.
	my $supports_action = enable_action_hooks($self, !defined $root);
	$self->enable_hooks;
	$self->init;
	if ($root->{register_keysyms}) {
		register_keysyms($self, $supports_action);
	}

	()
}

sub register_keysyms {
	my ($self, $supports_action) = @_;
	my $prefix = ($supports_action && $self->{_name}) || 'perl:tabbedex';
	$self->parse_keysym('Shift-Left', $prefix . ':prev_tab');
	$self->parse_keysym('Shift-Right', $prefix . ':next_tab');
	$self->parse_keysym('Shift-Down', $prefix . ':new_tab');
	$self->parse_keysym('Shift-Up', $prefix . ':rename_tab');
	$self->parse_keysym('Control-Left', $prefix . ':move_tab_left');
	$self->parse_keysym('Control-Right', $prefix . ':move_tab_right');
	for my $num (1..12) {
		$self->parse_keysym('Meta-F' . $num,
				    $prefix . ':goto_tab_' . $num);
	}
}

# Install handlers for ‘action’ and ‘user_command’ hooks.  This subroutine means
# that root and tab packages should not touch those hooks themselves.  This is
# here mostly because ancient urxvt errors out when trying to define ‘action’
# hook.  As I didn’t want to duplicate handling of that, I moved it here where
# both packages are handled.  And since ‘user_command’ is closely related, why
# not handle it here as well?  A µoptimisation is that whatever way an action
# reaches the plugin, there’s just one hop till ‘tab_action’ is called.
sub enable_action_hooks {
	my ($self, $isroot) = @_;
	$self->enable(user_command => $isroot ? sub {
		if ($_[1] =~ s/^tabbedex://) {
			splice @_, 1, 0, $_[0]{cur};
			goto \&urxvt::ext::tabbedex::root::tab_action;
		}
	} : sub {
		my ($tab, $cmd) = shift;
		if ($_[1] =~ s/^tabbedex://) {
			unshift @_, $_[0]{root};
			goto \&urxvt::ext::tabbedex::root::tab_action;
		}
	});
	# Guard against ancient urxvts which do not support ‘action’ hook.  We
	# probably shouldn’t bother, but oh well…
	eval {
		$self->enable(action => $isroot ? sub {
			splice @_, 1, 0, $_[0]{cur};
			goto \&urxvt::ext::tabbedex::root::tab_action;
		} : sub {
			unshift @_, $_[0]{root};
			goto \&urxvt::ext::tabbedex::root::tab_action;
		});
		1
	} // 0
}


package urxvt::ext::tabbedex::root;

use Encode qw(decode);

{
	my %hooks;

	sub _on($&) {
		my ($hook, $sub) = @_;
		$hooks{$hook} = $sub
	}

	sub enable_hooks {
		my ($root) = @_;
		$root->enable(%hooks);
		undef %hooks;
	}
}

{

my %matching_marks = ('[' => ']', '{' => '}', '(' => ')', '<' => '>');

sub tab_activity_marks {
	my ($root, $tab, $now) = @_;
	if (!defined($tab->{last_activity})) {
		return (' ', ' ');
	} elsif (defined $root->{timeouts}) {
		my $diff = $now - $tab->{last_activity};
		for my $spec (@{ $root->{timeouts} }) {
			my ($time, $left) = @$spec;
			if ($diff >= $time) {
				return ($left, $matching_marks{$left} // $left);
			}
		}
	}
	('*', '*')
}

}


# Determines which tabs are to be displayed in tabbar.  The one requirement is
# that current tab and tabs on both sides of it must be visible.  Apart from
# that, the method tries to cram as many tabs as possible.
#
# Returns a ($first, $last) pair indicating index of first and last (inclusive)
# tab to be shown in the tabbar.
sub _tabbar_span {
	my ($root, $ncol, $names) = @_;

	++$ncol;
	my $max = int(($ncol - 9) / 3);
	my $len = sub {
		my $l = length $names->[$_[0]];
		($l > $max ? $max : $l) + 3
	};

	my $i = 0;
	for (my $keep_going = 1; $keep_going && $i < @$names; ++$i) {
		$ncol -= $len->($i);
		$keep_going = !$i || $root->{tabs}[$i - 1] != $root->{cur};
	}

	if ($i < @$names) {
		--$ncol;  # Reserve character for right arrow.
	}

	my $first = 0;
	if ($ncol < 0) {
		# If NEW button is not shown, reserve characte for left arrow.
		$ncol += $len->($first++) - !$root->{new_button};
		while ($ncol < 0) {
			$ncol += $len->($first++);
		}
	}

	while ($i < @$names && ($ncol -= $len->($i)) >= 0) {
		++$i;
	}

	if ($i == $#$names && $ncol == -1) {
		# If we’re left with only the last tab and we’re missing one
		# character, we can use the space we reserved for right arrow.
		++$i;
	}

	($first, $i - 1)
}

# Determines largest tab name length limit which guarantees that all tabs in
# given range can be displayed in the tabbar.
sub _best_max_width($$$$) {
	my ($ncol, $names, $first, $last) = @_;

	$ncol -= 3 * ($last - $first) + 2;
	my $max = int($ncol / ($last - $first + 1));
	my @lens = sort { $a <=> $b }
	           grep { if ($_ <= $max) { $ncol -= $_; 0 } else { 1 } }
	           map  { length }
	           @{ $names }[$first .. $last];
	while (@lens) {
		$max = int($ncol / @lens);
		last if $lens[0] > $max;
		do {
			$ncol -= shift @lens;
		} while (@lens && $lens[0] <= $max);
	}
	$max;
}

# Returns a function which yields $name for tab with given index.  Takes
# ($max_length, \@names) as arguments.
sub _tab_name_getter($$) {
	my ($max_len, $names) = @_;
	if (!defined $max_len) {
		return sub { $names->[$_[0]] };
	} elsif ($max_len < 2) {
		return sub { substr $names->[$_[0]], -1 };
	} else {
		return sub {
			my $n = $names->[$_[0]];
			if ($max_len < length $n) {
				'…' . substr $n, -($max_len - 1);
			} else {
				$n;
			}
		};
	}
}

# Collects names of all the tabs and figures out how much of a tab name can be
# shown and how many tabs must be omitted.  Returns three values, ($first,
# $last, \&get_name), where:
# - $first is index of the first tab which should be displayed,
# - $last is index of the last tab which should be displayed and
# - \&get_name is a subroutine which returns $name of tab with given index.
# The method takes one argument $ncol which is space available to display tabs.
sub _size_tabs_for_refresh {
	my ($root, $ncol) = @_;

	# Construct array of lengths.
	my $total = -1;
	my @names = map {
		my $name = $root->{tabs}[$_]{name} || '' . ($_ + 1);
		$total += 3 + length $name;
		$name
	} 0..$#{ $root->{tabs} };

	my ($first, $last, $max) = (0, $#names);
	if ($total > $ncol) {
		if (@names > 3) {
			($first, $last) = $root->_tabbar_span($ncol, \@names);
		}
		$max = _best_max_width $ncol, \@names, $first, $last;
	}
	($first, $last, _tab_name_getter $max, \@names);
}

sub refresh {
	my ($root) = @_;

	my $visible = (!$root->{autohide} ||
	               @{ $root->{tabs} } > 1 ||
	               $root->{cur}->is_being_renamed);
	if ($visible != !!$root->{tabheight}) {
		$root->{tabheight} = $visible * $root->{maxtabheight};
		$root->configure;
		$root->copy_properties;
	}
	if (!$visible) {
		return;
	}

	my $bar = new urxvt::ext::tabbedex::tabbar($root);

	if ($root->{new_button}) {
		my $str = '[NEW]';
		if ($root->ncol <= 60) {
			$str = $root->ncol <= 30 ? '+' : 'NEW';
		}
		$bar->add_button($str, 1, -1);
	}

	my ($idx, $last, $get_name) = $root->_size_tabs_for_refresh(
		$bar->space_left);

	if ($idx) {
		$bar->add_arrow(-1);
	}

	for (my $now = int urxvt::NOW; $idx <= $last; ++$idx) {
		my $name = $get_name->($idx);
		my $tab = $root->{tabs}[$idx];
		my $color_idx = ($tab == $root->{cur}) +
			2 * ($now < $tab->{bell_ends});
		my ($left, $right) = $root->tab_activity_marks($tab, $now);
		$bar->add_button($left . $name . $right, $color_idx, $idx);
		if ($tab->is_being_renamed) {
			$bar->put_cursor(-2);
		}
	}

	if ($idx < @{ $root->{tabs} }) {
		$bar->add_arrow(1);
	}

	if ($root->{tab_title} && $bar->space_left) {
		my @str = $root->XGetWindowProperty(
			$root->parent, $root->{tab_title});
		if (@str && $str[2]) {
			my $str = decode('utf8', $str[2]);
			$bar->add_title($root->special_encode($str));
		}
	}

	$bar->apply;
	$root->want_refresh;
}

sub tab_term_init {
	my ($root, $term) = @_;
	$term->{'tabbedex-root-tab'} = $root;

	for (0 .. urxvt::NUM_RESOURCES - 1) {
		if (defined(my $value = $root->{resource}[$_])) {
			$term->resource("+$_" => $value);
		}
	}

	foreach my $key (values %urxvt::OPTION) {
		my $val = exists $root->{option}{$key}
		  ? $root->{option}{$key} : $root->option($key);
		$term->option($key, $val);
	}

	if (defined(my $blacklist = $root->{perl_ext_blacklist})) {
		$term->resource(perl_ext_2 =>
			$term->resource('perl_ext_2') . $blacklist);
	}
}

sub new_tab {
	my ($root) = @_;
	push @urxvt::TERM_INIT, sub { $root->tab_term_init($_[0]) };
	push @urxvt::TERM_EXT, urxvt::ext::tabbedex::;
	new urxvt::term
		$root->env, $urxvt::RXVTNAME,
		-embed => $root->parent,
		@{ $root->{argv} }
}


sub configure {
   my ($root) = @_;

   my $tab = $root->{cur};

   # this is an extremely dirty way to force a configurenotify, but who cares
   $tab->XMoveResizeWindow (
      $tab->parent,
      0, $root->{tabheight} + 1,
      $root->width, $root->height - $root->{tabheight}
   );
   $tab->XMoveResizeWindow (
      $tab->parent,
      0, $root->{tabheight},
      $root->width, $root->height - $root->{tabheight}
   );
}


sub copy_properties {
   my ($root) = @_;
   my $tab = $root->{cur};

   my $wm_normal_hints = $root->XInternAtom ("WM_NORMAL_HINTS");

   my $current = delete $root->{current_properties};

   # pass 1: copy over properties different or nonexisting
   for my $atom ($tab->XListProperties ($tab->parent)) {
      my ($type, $format, $items) = $root->XGetWindowProperty ($tab->parent,
                                                               $atom);

      # fix up size hints
      if ($atom == $wm_normal_hints) {
         my (@hints) = unpack "l!*", $items;

         $hints[$_] += $root->{tabheight} for (4, 6, 16);

         $items = pack "l!*", @hints;
      }

      my $cur = delete $current->{$atom};

      # update if changed, we assume empty items and zero type and
      # format will not happen
      $root->XChangeProperty ($root->parent, $atom, $type, $format, $items)
         if $cur->[0] != $type or $cur->[1] != $format or $cur->[2] ne $items;

      $root->{current_properties}{$atom} = [$type, $format, $items];
   }

   # pass 2, delete all extraneous properties
   $root->XDeleteProperty ($root->parent, $_) for keys %$current;
}


sub make_current {
	my ($root, $tab, $bell_ends) = @_;

	my $cur = $root->{cur};
	if ($cur == $tab) {
		return;
	}

	if ($cur) {
		delete $cur->{last_activity};
		$cur->{bell_ends} = 0;
		$cur->XUnmapWindow ($cur->parent) if $cur->mapped;
		$cur->focus_out;
	}

	$root->{cur} = $tab;

	$root->configure;
	$root->copy_properties;

	$tab->focus_out; # just in case, should be a nop
	$tab->focus_in if $root->focus;

	$tab->XMapWindow ($tab->parent);
	delete $tab->{last_activity};
	$tab->{bell_ends} = $bell_ends // 0;

	$root->refresh;
}


_on focus_in => sub {
   my ($root, $event) = @_;
   $root->{cur}->focus_in;
   ();
};

_on focus_out => sub {
   my ($root, $event) = @_;
   $root->{cur}->focus_out;
   ();
};

_on tt_write => sub {
    my ($root, $octets) = @_;
    $root->{cur}->tt_write ($octets);
    1
};

_on key_press => sub {
   my ($root, $event) = @_;
   $root->key_event('key_press', $event);
};

_on key_release => sub {
   my ($root, $event) = @_;
   $root->key_event('key_release', $event);
};

sub key_event {
	my ($root, $type, $event) = @_;
	my $tab = $root->{cur};
	$tab->$type($event->{state}, $event->{keycode}, $event->{time});

	# refresh_check is available since rxvt-unicode 9.22.  For some reason
	# $tab->can('refresh_check') doesn’t work which is why eval block is
	# used to silence warnings.
	eval {
		$tab->refresh_check;
	};
	if ($@ && $@ !~ /refresh_check/) {
		# If there was a warning unrelated to refresh_check propagate
		# it.  Otherwise ignore.
		warn "$@";
	}
	1;
}

_on button_release => sub {
	my ($root, $event) = @_;

	if ($root->{cur}->is_being_renamed || $event->{row} != 0 ||
	   $event->{button} != 1) {
		return ();
	}

	my $col = $event->{col};
	for my $button (@{ $root->{tabofs} }) {
		if ($col < $button->[0]) {
			last;
		} elsif ($col >= $button->[1]) {
			# nop
		} elsif ($button->[2] == -1) {
			$root->new_tab;
		} else {
			$root->make_current($root->{tabs}[$button->[2]]);
		}
	}
	1;
};


sub init {
   my ($root) = @_;

   $root->{resource} = [map $root->resource ("+$_"),
                            0 .. urxvt::NUM_RESOURCES - 1];

   $root->resource (int_bwidth => 0);
   $root->resource (pty_fd => -1);

   if (defined(my $key = $urxvt::OPTION{scrollBar})) {
      $root->{option}{$key} = $root->option($key, 0);
   }

   my $rs = new urxvt::ext::tabbedex::rs_reader($root);

   my $timeouts = $rs->text('tabbar-timeouts',
                            '0:▁:3:▂:6:▃:9:▄:12:▅:15:▆:18:▇:21:█');
   if ($timeouts) {
      my @timeouts;
      my $re = eval { qr/\G(\d+):(\X)(?::|$)/ } // qr/\G(\d+):(.)(?::|$)/;
      while ($timeouts =~ /$re/g) {
         push @timeouts, [ $1, $root->special_encode($2) ];
      }
      if (@timeouts) {
         @timeouts = sort { $b->[0] <=> $a->[0] } @timeouts;
         $root->{timeouts} = \@timeouts;
      }
   }

   $root->{bell_timeout}     = int($rs->text('bell-timeout') // 1);
   $root->{new_button}       = $rs->bool('new-button', 0);
   $root->{tab_title}        = $rs->bool('title', 1);
   $root->{autohide}         = $rs->bool('autohide', 1);
   $root->{register_keysyms} = !$rs->bool('no-tabbedex-keys', 0);
   $root->{reopen_on_close}  = $rs->bool('reopen-on-close', 0);
   $root->{new_tab_command}  = $rs->text('new-tab-command', 'inherit');

   if (my $blacklist = $rs->text('perl-ext-blacklist')) {
       $blacklist =~ s/,/,-/;
       $root->{perl_ext_blacklist} = ',-' . $blacklist;
   }

   my ($colours, $colours_cmd) = $rs->colours([3, 0, 'tabbar'],
                                              [0, 1, 'tab'],
                                              [0, 3, 'bell'],
                                              [5, 4, 'bell-tab'],
                                              [2, 0, 'title']);
   $root->{init_cmd} = "$colours_cmd\033[?25l";
   $root->{rs_colours} = $colours;
}

_on start => sub {
   my ($root) = @_;

   $root->{maxtabheight} =
      $root->int_bwidth + $root->fheight + $root->lineSpace;
   $root->{tabheight} = $root->{autohide} ? 0 : $root->{maxtabheight};

   $root->cmd_parse(delete $root->{init_cmd});

   my @argv = $root->argv;
   do {
      shift @argv;
   } while @argv && $argv[0] ne "-e";
   $root->{argv} = \@argv;

   if ($root->{tab_title}) {
      $root->{tab_title} = $root->XInternAtom("_NET_WM_NAME", 1);
   }

   $root->new_tab;

   if ($root->{new_tab_command} eq 'inherit') {
      # nop
   } elsif ($root->{new_tab_command} eq 'clear') {
      $root->{argv} = [];
   } elsif ($root->{new_tab_command} =~ /^-e\s/) {
      $root->{argv} = [split /\s+/, $root->{new_tab_command}];
   } else {
      printf "tabbedex: unrecognised value of new-tab-command: '%s'\n",
         $root->{new_tab_command};
   }
   delete $root->{new_tab_command};

   if (defined $root->{timeouts}) {
      my $interval = ($root->{timeouts}[@{ $root->{timeouts} } - 1]->[0]);
      $interval = int($interval / 4);
      $root->{timer} = urxvt::timer->new
                                   ->interval($interval < 1 ? 1 : $interval)
                                   ->cb ( sub { $root->refresh; } );
   }

   ();
};


_on configure_notify => sub {
   my ($root, $event) = @_;
   $root->configure;
   $root->refresh;
   ();
};


_on wm_delete_window => sub {
	my ($root) = @_;
	# Disable reopen-on-close so we respect delete window request.  If
	# reopen-on-close was to remain true, as soon as last tab was closed
	# a new would be created and we would never exit.
	$root->{reopen_on_close} = 0;
	$_->destroy for @{ $root->{tabs} };
	1;
};


sub tab_start {
	my ($root, $tab) = @_;
	$tab->XChangeInput ($tab->parent, urxvt::PropertyChangeMask);
	push @{ $root->{tabs} }, $tab;
	$root->make_current($tab);
	();
}


sub tab_destroy {
	my ($root, $tab) = @_;

	# If the tab is being renamed, stop renaming first.
	if ($tab->is_being_renamed) {
		$tab->finish_rename_tab(0);
	}

	my $idx = $tab->index;
	splice @{ $root->{tabs} }, $idx, 1;

	if (!@{ $root->{tabs} }) {
		if (!$root->{reopen_on_close}) {
			# Delay destruction a tiny bit.
			$root->{destroy} = urxvt::iw->new->start->cb(sub {
				$root->destroy;
			});
			return ();
		}
		$root->new_tab;
	}

	if ($root->{cur} == $tab) {
		delete $root->{cur};
		$idx = $idx < @{ $root->{tabs} } ? $idx : -1;
		$root->make_current($root->{tabs}[$idx]);
	} else {
		$root->refresh;
	}

	();
}


sub tab_property_notify {
   my ($root, $tab, $event) = @_;

   $root->copy_properties
      if $event->{window} == $tab->parent;

   ();
}


sub tab_bell {
	my ($root, $tab, $event) = @_;
	my $now = int urxvt::NOW;

	my $key = $urxvt::OPTION{urgentOnBell};
	if (defined($key) && $tab->option($key) && !$root->focus) {
		$root->set_urgency(1);
	}

	my $bell = $now < $tab->{bell_ends};
	if ($tab == $root->{cur}) {
		$tab->{bell_ends} = $now + $root->{bell_timeout};
	} elsif (defined($key = $urxvt::OPTION{mapAlert}) &&
	         $tab->option($key)) {
		$root->make_current($tab, $now + $root->{bell_timeout});
		return;
	} else {
		$tab->{bell_ends} = ~0;
	}

	if ($bell != ($now < $tab->{bell_ends})) {
		$root->refresh;
	}
	();
}


sub tab_add_lines {
	my ($root, $tab) = @_;
	if ($tab != $root->{cur}) {
		my $now = int urxvt::NOW;
		my $mark = $root->tab_activity_marks($tab, $now);
		$tab->{last_activity} = $now;
		if ($mark ne $root->tab_activity_marks($tab, $now)) {
			$root->refresh;
		}
	}
	();
}


sub tab_action {
	my ($root, $tab, $cmd) = @_;
	if ($cmd eq 'new_tab') {
		if (!$root->{cur}->is_being_renamed) {
			$root->new_tab;
		}
	} elsif ($cmd eq 'next_tab') {
		$root->change_tab($tab, 1);
	} elsif ($cmd eq 'prev_tab') {
		$root->change_tab($tab, -1);
	} elsif ($cmd eq 'move_tab_left') {
		$root->move_tab($tab, -1);
	} elsif ($cmd eq 'move_tab_right') {
		$root->move_tab($tab, 1);
	} elsif ($cmd =~ /^goto_tab[_:](-?\d+)$/) {
		if ($1 != 0 && !$root->{cur}->is_being_renamed && @{ $root->{tabs} } > 1) {
			my $idx = $1 > 0 ? ($1 - 1) : (@{ $root->{tabs} } + $1);
			if ($idx >= 0 && $idx < @{ $root->{tabs} }) {
				$root->make_current ($root->{tabs}[$idx]);
			}
		}
	} elsif ($cmd eq 'rename_tab') {
		if ($tab == $root->{cur} && $tab->start_rename_tab) {
			$root->refresh;
		}
	} elsif ($cmd eq 'kill_tab') {
		$tab->destroy;
	}
	()
}

sub change_tab {
    my ($root, $tab, $direction) = @_;

    if (!$root->{cur}->is_being_renamed && @{ $root->{tabs} } > 1) {
        my $idx = $tab->index + $direction;
        $root->make_current ($root->{tabs}[$idx % @{ $root->{tabs}}]);
    }

    ();
}

sub move_tab {
	my ($root, $tab, $direction) = @_;
	if (@{ $root->{tabs} } < 2) {
		return;
	}

	my $last = $#{$root->{tabs}};
	my $idx = $tab->index;

	if ($idx == 0 && $direction == -1) {
		push @{$root->{tabs}}, shift @{$root->{tabs}};
		$idx = $last;
	} elsif ($idx == $last && $direction == 1) {
		unshift @{$root->{tabs}}, pop @{$root->{tabs}};
		$idx = 0;
	} else {
		($root->{tabs}[$idx], $root->{tabs}[$idx + $direction]) =
			($root->{tabs}[$idx + $direction], $root->{tabs}[$idx]);
		$idx += $direction;
	}
	$root->refresh;
}


sub tab_osc_seq_perl {
	my ($root, $tab, $osc) = @_;

	if ($osc =~ /^tabbedx;set_tab_name;(.*)$/) {
		my $name = $root->locale_decode($1);
		if ($tab->set_name($root->special_encode($name))) {
			$root->refresh;
		}
		1;
	}
}


package urxvt::ext::tabbedex::tab;

# helper extension implementing the subwindows of a tabbed terminal.
# simply proxies all interesting calls back to the tabbedex class.


sub enable_hooks {
	for my $hook (qw(start destroy property_notify add_lines
	                 bell osc_seq_perl)) {
		my $name = "urxvt::ext::tabbedex::root::tab_$hook";
		$_[0]->enable($hook => sub {
			unshift @_, $_[0]{root};
			goto &$name;
		});
	};
}

sub init {
	$_[0]{bell_ends} = 0;
}


sub index {
	my ($tab) = @_;
	my $tabs = $tab->{root}{tabs};
	my $idx = 0;
	++$idx while $tabs->[$idx] != $tab;
	$idx;
}


sub start_rename_tab {
	my ($tab) = @_;
	if ($tab->is_being_renamed) {
		return 0;
	}
	$tab->{old_name} = $tab->{name};
	$tab->{name} = ' ';
	$tab->enable('key_press', \&_rename_tab_key_press);
	1
}

sub finish_rename_tab {
	my ($tab, $accept) = @_;
	if (!$tab->is_being_renamed) {
		urxvt::warn('finish_rename_tab called on tab which is not ' .
			    "being renamed\n");
		return;
	}
	if ($accept) {
		substr $tab->{name}, -1, 1, '';
	} else {
		$tab->{name} = $tab->{old_name};
	}
	delete $tab->{old_name};
	$tab->disable('key_press');

	$tab->{root}->refresh;
}

sub set_name {
	my ($tab, $name) = @_;
	if ($tab->is_being_renamed) {
		$tab->{old_name} = $name;
		0
	} else {
		$tab->{name} = $name;
		1
	}
}

sub is_being_renamed { exists $_[0]{old_name} }

sub _is_escape($$) {
	my ($event, $keysym) = @_;
	return 1 if $keysym == 0xff1b;  # Escape
	return 0 unless $event->{state} & urxvt::ControlMask;
	$keysym == 99 || $keysym == 67;  # Ctrl+C
}

sub _is_backspace($$) {
	my ($event, $keysym) = @_;
	return 1 if $keysym == 0xff08;  # Backspace
	return 0 unless $event->{state} & urxvt::ControlMask;
	$keysym == 104 || $keysym == 72;  # Ctrl+H
}

sub _rename_tab_key_press {
	my ($tab, $event, $keysym, $octets) = @_;

	# rxvt-unicode-scroll-bug-fix.patch causes early key_press events to be
	# passed without $keysym or $octects arguments passed.  Work around it
	# by ignoring such invocations; we’ll be called again soon with all
	# those arguments.  The patch shouldn’t be used any more anyway.
	if (!defined $keysym) {
		return 0;
	}

	my $is_enter = $keysym == 0xff0d || $keysym == 0xff8d;
	if ($is_enter || _is_escape $event, $keysym) {
		$tab->finish_rename_tab($is_enter);
	} elsif (_is_backspace $event, $keysym) {
		substr $tab->{name}, -2, 1, '';
	} elsif ($octets !~ /[\x00-\x1f]/) {
		my $text = $tab->locale_decode($octets);
		substr $tab->{name}, -1, 0, $tab->special_encode($text);
	} else {
		return 1;
	}

	$tab->{root}->refresh;
	1
}


## Class for getting data from resources.  Most notably, it handles the
## deprecated ‘tabbedex-rs-prefix’ resource and parsing of colours.
package urxvt::ext::tabbedex::rs_reader;

sub new {
	my ($class, $root) = @_;
	my $prefix = $root->x_resource('tabbed.tabbedex-rs-prefix');
	bless [$root, $prefix // 'tabbed', $root->{_name}], $class
}

sub text {
	my ($rs, $name, $default) = @_;
	my ($root, $prefix, $extname) = @$rs;
	my $value = $root->x_resource("$prefix.$name");
	if (defined $value && defined $extname &&
	    $prefix ne $extname && $prefix ne '%') {
		urxvt::warn("$extname: ‘tabbed.tabbedex-rs-prefix’ resource is deprecated and should be set to ‘%’ or tabbedex configuration will stop working.\n");
		urxvt::warn("$extname: With that changed, all tabbedex resources must use extension’s name as prefix (i.e. ‘$extname’), for example:\n");
		urxvt::warn("$extname:     URxvt.$extname.$name: $value\n");
		pop @$rs;
	}
	defined $value ? $root->locale_decode($value) : $default
}

sub bool {
	my $value = $_[0]->text($_[1]);
	defined $value ? $value !~ /^(?:false|0|no|off)$/i : $_[2];
}

sub colours {
	my $rs = shift;

	my (@suffix, %used) = ('-fg', '-bg');
	for my $c (@_) {
		for my $i (0, 1) {
			my $value = $rs->text($c->[2] . $suffix[$i]);
			if (defined $value) {
				$value =~ s/\s+/ /g;
				$value =~ s/^ | $//g;
				if ($value =~ /^[-#a-zA-Z0-9 ]/) {
					$c->[$i] = $value;
				}
			}
			$used{$c->[$i]} = undef;
		}
	}

	my ($i, $cmd) = (0, '');
	for my $key (keys %used) {
		if ($key =~ /^-?\d+$/ && -2 <= $key && $key <= 255) {
			$used{$key} = $key + 2;
		} else {
			++$i while exists $used{$i};
			$cmd .= ';' . $i . ';' . $key;
			$used{$key} = $used{$i} = $i + 2;
		}
	}

	my $default = urxvt::DEFAULT_RSTYLE;
	for $i (0..$#_) {
		my ($fg, $bg) = @{ $_[$i] };
		$_[$i] = urxvt::SET_COLOR $default, $used{$fg}, $used{$bg};
	}

	(\@_, $cmd ? "\e]4$cmd\a" : '')
}


## Class for building up the tabbar.
package urxvt::ext::tabbedex::tabbar;

sub new {
	my ($class, $root) = @_;
	$#{ $root->{tabofs} } = -1;
	bless {
		root => $root,
		text => '',
		rend => [],
		ncol => $root->ncol,
		buttons => $root->{tabofs},
		pipe_pending => 0,
		pad_colour => 0,
	}, $class;
}

sub _append {
	my ($bar, $text, $c) = @_;
	$bar->{text} .= $text;
	push @{$bar->{rend}}, ($bar->{root}{rs_colours}[$c]) x length $text;
}

sub _append_pending_pipe_maybe {
	my ($bar) = @_;
	if ($bar->{pipe_pending}) {
		$bar->_append('|');
		$bar->{pipe_pending} = 0;
	}
}

sub space_left {
	my ($bar) = @_;
	$bar->{ncol} - $bar->{pipe_pending} - length $bar->{text};
}

sub add_button {
	my ($bar, $text, $color_idx, $code) = @_;
	$bar->_append_pending_pipe_maybe;
	my $start = length $bar->{text};
	$bar->_append($text, $color_idx);
	push @{ $bar->{buttons} }, [$start, length $bar->{text}, $code];
	$bar->{pipe_pending} = 1;
}

sub add_title {
	my ($bar, $text) = @_;

	my $available = $bar->space_left;
	if (!$available) {
		return;
	}

	$bar->_append_pending_pipe_maybe;
	if (length $text < $available) {
		$text = ' ' . $text;
	} elsif ($available == 1) {
		$text = substr $text, 0, 1;
	} else {
		$text = (substr $text, 0, $available - 1) . '…';
	}
	$bar->_append($text, 4);
	$bar->{pad_colour} = 4;
}

sub add_arrow {
	my ($bar, $direction) = @_;
	$bar->_append($direction < 0 ? '←' : '→');
	$bar->{pipe_pending} = 0;
}

sub put_cursor {
	my ($bar, $dx) = @_;
	$bar->{cursor} = length($bar->{text}) + $dx + 1;
}

sub apply {
	my ($bar) = @_;
	$bar->{pipe_pending} = 0;
	$bar->_append(' ' x ($bar->{ncol} - length $bar->{text}),
	              $bar->{pad_colour});
	my ($root, $cur) = ($bar->{root}, $bar->{cursor});
	$root->cmd_parse(defined($cur) ? "\e[1;${cur}f\e[?25h" : "\e[?25l");
	$root->ROW_t(0, $bar->{text}, 0, 0, $bar->{ncol});
	$root->ROW_r(0, $bar->{rend}, 0, 0, $bar->{ncol});
}
